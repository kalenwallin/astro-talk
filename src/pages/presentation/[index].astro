---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Slide from '../../components/slides/Slide.astro';
import { fade, slide } from 'astro:transitions';
import BackButton from '@/components/BackButton.astro';

export async function getStaticPaths() {
  const slides = await getCollection('slides');
  slides.sort((a, b) => (a.data.order ?? 0) - (b.data.order ?? 0));
  return slides.map((_, index) => ({
    params: { index: index.toString() },
  }));
}

const slides = await getCollection('slides');
slides.sort((a, b) => (a.data.order ?? 0) - (b.data.order ?? 0));
const currentIndex = parseInt(Astro.params.index, 10);
const currentSlide = slides[currentIndex];
const prevIndex = currentIndex > 0 ? currentIndex - 1 : null;
const nextIndex = currentIndex < slides.length - 1 ? currentIndex + 1 : null;

// Get the previous page URL
const referer = Astro.request.headers.get('referer') || ''; // "/" or "/presentation/#"
const isFromHome = referer.endsWith('/');

// const previousPageIndex = isFromHome ? null : parseInt(referer.split('/').pop() || '0', 10);
// const slideDirection = previousPageIndex === null ? null : previousPageIndex < currentIndex ? 'left' : 'right';

export const prerender = false; // so that we can check which transition is used
---

<Layout>
  <BackButton />
  <div class="absolute top-4 left-1/2 z-30 flex -translate-x-1/2 gap-4">
    <button id="zoom-out" class="text-blue-400 hover:text-blue-300">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        <line x1="8" y1="11" x2="14" y2="11"></line>
      </svg>
    </button>
    <button id="zoom-in" class="text-blue-400 hover:text-blue-300">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <circle cx="11" cy="11" r="8"></circle>
        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        <line x1="11" y1="8" x2="11" y2="14"></line>
        <line x1="8" y1="11" x2="14" y2="11"></line>
      </svg>
    </button>
  </div>
  <div class="z-10 flex h-screen flex-col items-center justify-center px-24 pt-24 pb-16">
    <div
      id="content"
      class="animate-zoom w-full"
      transition:name={`/presentation/${currentIndex}`}
      transition:animate={isFromHome ? fade({ duration: '1s' }) : slide({ duration: '0.5s' })}
      style="transform-origin: center;"
    >
      <Slide slide={currentSlide} />
    </div>
    <div class="relative z-30 my-4 flex w-full items-center justify-between">
      {
        prevIndex !== null ? (
          <a id="prev-slide" class="transition-link text-blue-400" href={`/presentation/${prevIndex}`}>
            Previous
          </a>
        ) : (
          <div />
        )
      }
      {
        nextIndex !== null ? (
          <a id="next-slide" class="transition-link text-blue-400" href={`/presentation/${nextIndex}`}>
            Next
          </a>
        ) : (
          <div />
        )
      }
    </div>
  </div>
</Layout>
<script>
  let currentScale = 1;
  const content = document.getElementById('content');
  const MIN_SCALE = 0.5;
  const MAX_SCALE = 2;
  const SCALE_STEP = 0.1;

  document.getElementById('zoom-in')?.addEventListener('click', () => {
    if (currentScale < MAX_SCALE && content) {
      currentScale += SCALE_STEP;
      content.style.transform = `scale(${currentScale})`;
    }
  });

  document.getElementById('zoom-out')?.addEventListener('click', () => {
    if (currentScale > MIN_SCALE && content) {
      currentScale -= SCALE_STEP;
      content.style.transform = `scale(${currentScale})`;
    }
  });

  document.addEventListener('keydown', e => {
    switch (e.key) {
      case 'Escape':
        (document.getElementById('home-link') as HTMLAnchorElement)?.click();
        break;
      case 'ArrowLeft':
        (document.getElementById('prev-slide') as HTMLAnchorElement)?.click();
        break;
      case 'ArrowRight':
        (document.getElementById('next-slide') as HTMLAnchorElement)?.click();
        break;
      case '+':
      case '=':
        document.getElementById('zoom-in')?.click();
        break;
      case '-':
        document.getElementById('zoom-out')?.click();
        break;
    }
  });
</script>
