---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import SlidePreview from '../components/slides/SlidePreview.astro';
import { fade } from 'astro:transitions';
import DemoPreview from '@/components/demos/DemoPreview.astro';

const slides = await getCollection('slides');
slides.sort((a, b) => (a.data.order ?? 0) - (b.data.order ?? 0));
// console.log('slides', slides.length, slides);
---

<Layout>
  <h1 class="p-16 text-center text-4xl font-bold text-white">Blast Off With Astro! ðŸš€</h1>
  <div class="container mx-auto p-12">
    <div class="flex h-full flex-wrap items-center justify-center gap-12">
      {
        slides.map((slide, index) => {
          const slideLink = `/presentation/${index}`;
          return (
            <div transition:name={slideLink} transition:animate={fade({ duration: 1 })}>
              <button
                onclick={`window.location.href='${slideLink}'`}
                class="block cursor-pointer transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-[0_0_15px_rgba(255,255,255,0.3)]"
              >
                <SlidePreview slide={slide} />
              </button>
            </div>
          );
        })
      }
    </div>
  </div>
  <h2 class="pt-16 text-center text-4xl font-bold text-white">Demos</h2>
  <div class="container mx-auto p-12">
    <div class="flex h-full flex-wrap items-center justify-center gap-12">
      <DemoPreview title="React" link="/demos/react" />
      <DemoPreview title="Svelte" link="/demos/svelte" />
      <DemoPreview title="React and Svelte" link="/demos/reactandsvelte" />
    </div>
  </div>
</Layout>

<script>
  // Get all slide preview buttons
  const slideButtons = document.querySelectorAll('button[onclick^="window.location.href=\'/presentation/"]');
  let currentFocusIndex = -1;
  let cardsPerRow = 1;

  // Function to calculate cards per row
  const calculateCardsPerRow = () => {
    if (slideButtons.length === 0) return 1;
    
    const firstCard = slideButtons[0].getBoundingClientRect();
    const containerWidth = firstCard.width * 1.5; // Account for gap
    const viewportWidth = window.innerWidth;
    return Math.max(1, Math.floor(viewportWidth / containerWidth));
  };

  // Calculate initial cards per row
  cardsPerRow = calculateCardsPerRow();

  // Update cards per row on window resize
  window.addEventListener('resize', () => {
    cardsPerRow = calculateCardsPerRow();
  });

  // Add keyboard navigation
  document.addEventListener('keydown', e => {
    // Only handle arrow keys
    if (!['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
      return;
    }

    e.preventDefault();

    // Initialize focus if none exists
    if (currentFocusIndex === -1) {
      currentFocusIndex = 0;
      (slideButtons[0] as HTMLButtonElement)?.focus();
      return;
    }

    const totalSlides = slideButtons.length;
    let newIndex = currentFocusIndex;

    switch (e.key) {
      case 'ArrowRight':
        newIndex = Math.min(currentFocusIndex + 1, totalSlides - 1);
        break;
      case 'ArrowLeft':
        newIndex = Math.max(currentFocusIndex - 1, 0);
        break;
      case 'ArrowDown':
        newIndex = Math.min(currentFocusIndex + cardsPerRow, totalSlides - 1);
        break;
      case 'ArrowUp':
        newIndex = Math.max(currentFocusIndex - cardsPerRow, 0);
        break;
    }

    if (newIndex !== currentFocusIndex) {
      currentFocusIndex = newIndex;
      (slideButtons[currentFocusIndex] as HTMLButtonElement)?.focus();
    }
  });

  // Handle focus events to track current index
  slideButtons.forEach((button, index) => {
    button.addEventListener('focus', () => {
      currentFocusIndex = index;
    });
  });
</script>
